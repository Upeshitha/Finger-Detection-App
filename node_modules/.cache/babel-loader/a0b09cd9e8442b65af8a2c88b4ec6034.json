{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"E:\\\\User\\\\Documents\\\\HCI Web\\\\POSE Estimation\\\\handpose\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport Webcam from \"react-webcam\";\nimport './App.css';\nimport { drawHand } from \"./utilities\"; //import new stuff\n\nimport * as fp from \"fingerpose\";\n\nfunction App() {\n  _s();\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const runHandpose = async () => {\n    const net = await handpose.load();\n    console.log('Handpose model loaded.'); // Loop and detect hands\n\n    setInterval(() => {\n      detect(net);\n    }, 100);\n  };\n\n  const detect = async net => {\n    //check data is available\n    if (typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n      //Get video properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight; //set video height and width\n\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight; //set canvas height and width\n\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight; //Make Detections\n\n      const hand = await net.estimateHands(video);\n      console.log(hand); //create thumbDown\n      // const thumbsDownGesture = new fp.GestureDescription('thumbs_down');\n      // thumbsDownGesture.addCurl(fp.Finger.Thumb, fp.FingerCurl.NoCurl, 1.0);\n      // thumbsDownGesture.addDirection(fp.Finger.Thumb, fp.FingerDirection.VerticalDown, 1.0);\n      // thumbsDownGesture.addDirection(fp.Finger.Thumb, fp.FingerDirection.DiagonalDownLeft, 0.5);\n      // thumbsDownGesture.addDirection(fp.Finger.Thumb, fp.FingerDirection.DiagonalDownRight, 0.5);\n      // thumbsDownGesture.addCurl(fp.Finger.Index, fp.FingerCurl.FullCurl, 1.0);\n      // thumbsDownGesture.addCurl(fp.Finger.Middle, fp.FingerCurl.FullCurl, 1.0);\n      // thumbsDownGesture.addCurl(fp.Finger.Ring, fp.FingerCurl.FullCurl, 1.0);\n      // thumbsDownGesture.addCurl(fp.Finger.Pinky, fp.FingerCurl.FullCurl, 1.0);\n      // //create thumbUp\n      // const thumbsUpDescription = new fp.GestureDescription('thumbs_up');\n      // thumbsUpDescription.addCurl(fp.Finger.Thumb, fp.FingerCurl.NoCurl, 1.0);\n      // thumbsUpDescription.addDirection(fp.Finger.Thumb, fp.FingerDirection.VerticalUp, 1.0);\n      // thumbsUpDescription.addDirection(fp.Finger.Thumb, fp.FingerDirection.DiagonalUpLeft, 0.25);\n      // thumbsUpDescription.addDirection(fp.Finger.Thumb, fp.FingerDirection.DiagonalUpRight, 0.25);\n      // thumbsDownGesture.addCurl(fp.Finger.Index, fp.FingerCurl.FullCurl, 1.0);\n      // thumbsDownGesture.addCurl(fp.Finger.Middle, fp.FingerCurl.FullCurl, 1.0);\n      // thumbsDownGesture.addCurl(fp.Finger.Ring, fp.FingerCurl.FullCurl, 1.0);\n      // thumbsDownGesture.addCurl(fp.Finger.Pinky, fp.FingerCurl.FullCurl, 1.0);\n      //gesture Detections\n\n      if (hand.length > 0) {\n        const GE = new fp.GestureEstimator([fp.Gestures.VictoryGesture, fp.Gestures.ThumbsUpGesture]);\n        const model = await handpose.load();\n        const predictions = await model.estimateHands(video, true);\n        const estimatedGestures = GE.estimate(predictions.landmarks, 7.5);\n      } //Draw mesh\n\n\n      const ctx = canvasRef.current.getContext(\"2d\");\n      drawHand(hand, ctx);\n    }\n\n    ;\n  };\n\n  runHandpose();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(Webcam, {\n        ref: webcamRef,\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 9,\n          width: 640,\n          height: 480\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 9,\n          width: 640,\n          height: 480\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"AwQWgsmsPhWgADiRou0jnDEtoH4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["E:/User/Documents/HCI Web/POSE Estimation/handpose/src/App.js"],"names":["React","useRef","useState","tf","handpose","Webcam","drawHand","fp","App","webcamRef","canvasRef","runHandpose","net","load","console","log","setInterval","detect","current","video","readyState","videoWidth","videoHeight","width","height","hand","estimateHands","length","GE","GestureEstimator","Gestures","VictoryGesture","ThumbsUpGesture","model","predictions","estimatedGestures","estimate","landmarks","ctx","getContext","position","marginLeft","marginRight","left","right","textAlign","zindex"],"mappings":"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","sourcesContent":["import React, {useRef, useState} from 'react';\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport Webcam from \"react-webcam\";\nimport './App.css';\nimport {drawHand} from \"./utilities\";\n\n\n//import new stuff\nimport * as fp from \"fingerpose\";\n\n\nfunction App() {\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const runHandpose = async () =>{\n    const net = await handpose.load();\n    console.log('Handpose model loaded.');\n    // Loop and detect hands\n    setInterval(()=>{\n      detect(net)\n    }, 100)\n  };\n\n  const detect = async (net) =>{\n    //check data is available\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ){\n      //Get video properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      //set video height and width\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      //set canvas height and width\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      //Make Detections\n      const hand = await net.estimateHands(video);\n      console.log(hand);\n\n      //create thumbDown\n      // const thumbsDownGesture = new fp.GestureDescription('thumbs_down');\n      // thumbsDownGesture.addCurl(fp.Finger.Thumb, fp.FingerCurl.NoCurl, 1.0);\n      // thumbsDownGesture.addDirection(fp.Finger.Thumb, fp.FingerDirection.VerticalDown, 1.0);\n      // thumbsDownGesture.addDirection(fp.Finger.Thumb, fp.FingerDirection.DiagonalDownLeft, 0.5);\n      // thumbsDownGesture.addDirection(fp.Finger.Thumb, fp.FingerDirection.DiagonalDownRight, 0.5);\n\n      // thumbsDownGesture.addCurl(fp.Finger.Index, fp.FingerCurl.FullCurl, 1.0);\n      // thumbsDownGesture.addCurl(fp.Finger.Middle, fp.FingerCurl.FullCurl, 1.0);\n      // thumbsDownGesture.addCurl(fp.Finger.Ring, fp.FingerCurl.FullCurl, 1.0);\n      // thumbsDownGesture.addCurl(fp.Finger.Pinky, fp.FingerCurl.FullCurl, 1.0);\n\n      // //create thumbUp\n      // const thumbsUpDescription = new fp.GestureDescription('thumbs_up');\n      // thumbsUpDescription.addCurl(fp.Finger.Thumb, fp.FingerCurl.NoCurl, 1.0);\n      // thumbsUpDescription.addDirection(fp.Finger.Thumb, fp.FingerDirection.VerticalUp, 1.0);\n      // thumbsUpDescription.addDirection(fp.Finger.Thumb, fp.FingerDirection.DiagonalUpLeft, 0.25);\n      // thumbsUpDescription.addDirection(fp.Finger.Thumb, fp.FingerDirection.DiagonalUpRight, 0.25);\n\n      // thumbsDownGesture.addCurl(fp.Finger.Index, fp.FingerCurl.FullCurl, 1.0);\n      // thumbsDownGesture.addCurl(fp.Finger.Middle, fp.FingerCurl.FullCurl, 1.0);\n      // thumbsDownGesture.addCurl(fp.Finger.Ring, fp.FingerCurl.FullCurl, 1.0);\n      // thumbsDownGesture.addCurl(fp.Finger.Pinky, fp.FingerCurl.FullCurl, 1.0);\n\n      //gesture Detections\n      \n      if(hand.length >0){\n        const GE = new fp.GestureEstimator([\n          fp.Gestures.VictoryGesture,\n          fp.Gestures.ThumbsUpGesture    \n        ]);\n\n        const model = await handpose.load();\n        const predictions = await model.estimateHands(video, true);\n\n        const estimatedGestures = GE.estimate(predictions.landmarks, 7.5);\n        \n      }\n\n      //Draw mesh\n      const ctx = canvasRef.current.getContext(\"2d\");\n      drawHand(hand, ctx);\n\n      \n    };\n  }\n\n  runHandpose();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n       \n        <Webcam ref={webcamRef}\n        style={{\n          position:\"absolute\",\n          marginLeft:\"auto\",\n          marginRight:\"auto\",\n          left:0,\n          right:0,\n          textAlign:\"center\",\n          zindex:9,\n          width:640,\n          height:480\n        }} />\n       \n        <canvas\n          ref={canvasRef}\n          style={{\n            position:\"absolute\",\n            marginLeft:\"auto\",\n            marginRight:\"auto\",\n            left:0,\n            right:0,\n            textAlign:\"center\",\n            zindex:9,\n            width:640,\n            height:480\n          }} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}